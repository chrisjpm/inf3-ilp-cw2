This report is for student s1839592

The raw overall mark is (72/75)
The awarded mark is (72/75)

The awarded mark includes a deduction for any days late, following the
standard School and University scheme: the deduction is 5% per
calendar day up to 7 days.  For submissions more than 7 days late, 0
is awarded.

The submission deadline was 16:00 on 4 Dec 2020.

Submission time-stamp: 2020-12-04-13-01-10
Extension date (blank if no extension granted):
Days late: 0


Overall comments (may be empty):
BEGIN COMMENTS
Overall, this is an essentially flawless submission which meets the
requirements of Coursework 2 very well and provides a very satisfying
conclusion to the Informatics Large Practical.
END COMMENTS


As described on pages 17 and 18 of the coursework instructions, marks
are awarded for three aspects:


1. the report,
2. the implementation,
3. the output generated when tests are run.

See below for your mark for each aspect and associated comments.



1. REPORT (27/30)
-----------------
The instructions asked you to submit a report documenting your project
containing three sections.  Descriptions of what was asked for in each
section and comments on what you provided in your report are as
follows:


1.1 Software architecture description.

This section provides a description of the software architecture of
your application. Your application is made up of a collection of Java
classes; explain why you identified these classes as being the right
ones for your application.

BEGIN COMMENTS
Your software architecture section provides a good description of why
classes were identified.

You have defined some classes to structure your solution but there were
other opportunities to do this which you did not take. Your application
design could have been improved here.

You have defined several classes which represent the semantic objects of the
problem (such as Drone, Sensor, NoFlyZone, or other objects mentioned in the
problem description). This was a very good design decision because it makes
for a good object-oriented design.

You have defined data classes which will allow you to import JSON data into
your application; this was a good design decision.

Your naming of classes is descriptive and consistent.
END COMMENTS


1.2. Class documentation.

Provide concise documentation for each class in your
application. Explain each class as through providing documentation for
a developer who will be maintaining your application in the future.

BEGIN COMMENTS
Your documentation section provides a good description of the classes in
your application.

Your documentation is well-structured and systematic, making it easy to find
and access information.

The level of documentation provided is consistent, with all methods having
some documentation.

Method type information is included in your documentation (method input
types and method result types are specified). This is very helpful.

You documented only public methods of classes, but private and protected
methods need documentation too.
END COMMENTS


1.3 Drone control algorithm

This section explains the algorithm which is used by your drone to
control their flight around the air-quality sensors and back to the
start location of their flight, while avoiding all of the no-fly
zones.

This section of your report should contain two graphical figures
(similar to Figure 6 in the instructions) which have been made using
the http://geojson.io website, rendering the flights of your drone on
two dates of your choosing.

BEGIN COMMENTS
Your drone control algorithm section provides a good description of the
elements of your algorithm.

You provided a good description of how your drone decides the order in which
to visit the air-quality sensors.

You provided a good description of how your drone manages the flight home to
the start location of the flightpath.

You provided a good description of how your drone manages its flightpath to
avoid the No-Fly zones of the map.

As required, you included two plots of the flight path for your drone.
END COMMENTS



2. IMPLEMENTATION (30/30)
-------------------------
The instructions were as follows:

  Your submission should faithfully implement the drone behaviour
  described in this document, hosted in a framework which allows the
  drone to make a maximum of 150 moves on any day. Your application
  should be usably efficient, without significant stalls while
  executing. Your code should be readable and clear, making use of
  private values, variables and functions, and encapsulating code and
  data structures. Where it is appropriate to do so, your classes should
  be structured in a way which makes use of the Java class hierarchy
  mechanism. All else being equal, code with comments should receive a
  higher mark than code without comments. Everyone thinks that their
  code is self-documenting, but it isnâ€™t.

The mark awarded here was based on a review of your submitted code, on
whether your code compiled and was packaged correctly using maven, and
on whether your code ran and generated the expected .txt and .geojson
output files. 


Comments from a review of your submitted code:
BEGIN COMMENTS
You have made good use of visibility modifiers such as private or protected
to encapsulate fields and methods.

You have made good use of the final modifier to mark fields as being
immutable.

You have made good use of exception handling to catch the exceptions which
are thrown by I/O operations.

You do not use the Java throws mechanism to avoid exception handling. This
is good practice.

You used the Java 11 HttpClient to access the web server. This is the right
thing to do when contributing to a Java 11 project.

You used the Gson parser to parse JSON documents obtained from the web
server. This is a good approach.

You did not use low-level Gson classes such as JsonArray, JsonElement, or
JsonObject. This was a good decision because it should not have been
necessary to use these.

Your Java code has lots of comments to help the next developer working on
the project. Well done.

Your code contains TODO comments which should have been removed before
submission. It is not always clear whether the TODO issue has been resolved.

Your code does not contain commented-out Java code which should have been
removed before submission. This is good to see.
END COMMENTS


Comments on compiling your code using Maven (may be empty if no issues):
BEGIN COMMENTS
 
END COMMENTS


Comments from running your code (may be empty if no issues):
BEGIN COMMENTS
 
END COMMENTS




3. OUTPUT (15/15)
-----------------
The instructions specified:

  The output files which you submit will be tested to ensure that the
  moves made by the drone are legal according to the description given
  above, considering the drone confinement area and the no-fly zones
  described above. The efficiency of the drone will be considered: the
  fewer the number of moves required to visit all the sensors and return
  close to the initial location on the flight path, the better the
  quality of the drone.

Comments on your submitted output files (maybe empty if no issues):
BEGIN COMMENTS
The submitted zip file of output files did not have the output files placed
in an ilp-results folder, as requested. Had to fix this to enable automatic
checking of the output files.
END COMMENTS


24 tests were run.  Tests used the command

  java -jar target/aqmaps-0.0.1-SNAPSHOT.jar DD MM YYYY 55.9444 -3.1878 9899 9899

with DD, MM the same and selected from {01,02,03,04,05,06,07,08,09,10,11,12}
and YYYY selected from {2020,2021}.

Tests were carried out on a School DICE compute server running Ubuntu 20.04.
Each test was run with a 300s time limit.

A few statistics on the test results are as follows:

  Minimum run time: 0.9s
  Median  run time: 0.9s
  Maximum run time: 1.7s

  Number of tests terminated at time limit: 0
  Number of flightpath*.txt   files output by tests: 24
  Number of readings*.geojson files output by tests: 24

An auto-marker program was run on the test outputs.  Three scores were
calculated:

1. For 2020 output files requested with submission: (120/120)
2. For 2020 output files generated by testing: (120/120)
3. For 2020 and 2021 output files generated by testing: (240/240)

The first two scores were to see how similar our testing was to the
conditions under which the submitted output files were generated. In
most cases, the scores are the same, in a few there are significant
differences.  These may be partly due to the different random seed we
used and the 300s running time restriction for each test.

The third score was scaled to calculate your mark out of 15 for this
section.

For details on how this third score was calculated, please see the
attached file

    auto-report.txt

generated by the auto-marker.

END OF REPORT